#pragma kernel MarchingCubes
#pragma kernel GenerateTriangleIndicesAndNormals
#include "Lookup.compute"

struct TriangleVertices 
{
    float3 a, b, c;
};

struct TriangleIndices {
    dword index1, index2, index3;
};

float isoLevel;
int chunkWidth;
int chunkHeight;
int chunkDepth;
RWStructuredBuffer<float> DensitiesBuffer;
AppendStructuredBuffer<TriangleVertices> TrianglesBuffer; 
RWStructuredBuffer<float3> SurfaceNormalsBuffer;
RWStructuredBuffer<TriangleIndices> TriangleIndicesBuffer;
RWStructuredBuffer<float3> VerticesBuffer;



float3 VertexInterp(float3 vPos1, float3 vPos2, float density1, float density2)
{
	return lerp(vPos1, vPos2, (isoLevel - density1) / (density2 - density1));
}

int IndexFromCoord(uint3 coords) {
    return coords.x + coords.y * chunkWidth + coords.z * chunkWidth * chunkHeight;
}


[numthreads(8, 8, 8)]
void MarchingCubes(uint3 cellPos : SV_DispatchThreadID) 
{
    if (cellPos.x >= chunkWidth - 1  || cellPos.y >= chunkHeight - 1|| cellPos.z >= chunkDepth - 1) {
        return;
    }

    float cubeDensity[8] = {
        DensitiesBuffer[IndexFromCoord(cellPos + cubeVertOffsets[0])],
        DensitiesBuffer[IndexFromCoord(cellPos + cubeVertOffsets[1])],
        DensitiesBuffer[IndexFromCoord(cellPos + cubeVertOffsets[2])],
        DensitiesBuffer[IndexFromCoord(cellPos + cubeVertOffsets[3])],
        DensitiesBuffer[IndexFromCoord(cellPos + cubeVertOffsets[4])],
        DensitiesBuffer[IndexFromCoord(cellPos + cubeVertOffsets[5])],
        DensitiesBuffer[IndexFromCoord(cellPos + cubeVertOffsets[6])],
        DensitiesBuffer[IndexFromCoord(cellPos + cubeVertOffsets[7])]
    };


    int cubeIndex = 0;
	if (cubeDensity[0] < isoLevel) cubeIndex |= 1;
	if (cubeDensity[1] < isoLevel) cubeIndex |= 2;
	if (cubeDensity[2] < isoLevel) cubeIndex |= 4;
	if (cubeDensity[3] < isoLevel) cubeIndex |= 8;
	if (cubeDensity[4] < isoLevel) cubeIndex |= 16;
	if (cubeDensity[5] < isoLevel) cubeIndex |= 32;
	if (cubeDensity[6] < isoLevel) cubeIndex |= 64;
	if (cubeDensity[7] < isoLevel) cubeIndex |= 128;

    for (int i = 0; triTable[cubeIndex][i] != -1; i +=3) 
    {

        int a0 = cornerIndexAFromEdge[triTable[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triTable[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triTable[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triTable[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triTable[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triTable[cubeIndex][i + 2]];

        TriangleVertices tri;
        tri.a = VertexInterp((cellPos + cubeVertOffsets[a0]), (cellPos + cubeVertOffsets[b0]), cubeDensity[a0], cubeDensity[b0]);
        tri.b = VertexInterp((cellPos + cubeVertOffsets[a1]), (cellPos + cubeVertOffsets[b1]), cubeDensity[a1], cubeDensity[b1]);
        tri.c = VertexInterp((cellPos + cubeVertOffsets[a2]), (cellPos + cubeVertOffsets[b2]), cubeDensity[a2], cubeDensity[b2]); 

        TrianglesBuffer.Append(tri); 
    }
}

[numthreads(1, 1, 1)]
void GenerateTriangleIndicesAndNormals(uint3 vertexPosition : SV_DispatchThreadID) {
        int index = vertexPosition.x * 3;

        int indexA = index;
        int indexB = index + 1;
        int indexC = index + 2;

        TriangleIndices indices = {
            indexA,
            indexB,
            indexC,
        };
        TriangleIndicesBuffer[vertexPosition.x] = indices;

        float3 AB = VerticesBuffer[indexB] - VerticesBuffer[indexA];
        float3 AC = VerticesBuffer[indexC] - VerticesBuffer[indexA];
        float3 surfaceNormal = normalize(cross(AB, AC));

        SurfaceNormalsBuffer[indexA] = surfaceNormal;
        SurfaceNormalsBuffer[indexB] = surfaceNormal;
        SurfaceNormalsBuffer[indexC] = surfaceNormal;
}